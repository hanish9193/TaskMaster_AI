{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Hanish/Downloads/TM/src/ai/ai-instance.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  promptDir: './prompts',\n  plugins: [\n    googleAI({\n      apiKey: process.env.GOOGLE_GENAI_API_KEY,\n    }),\n  ],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,WAAW;IACX,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YACP,QAAQ,QAAQ,GAAG,CAAC,oBAAoB;QAC1C;KACD;IACD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 247, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Hanish/Downloads/TM/src/ai/flows/generate-task-response.ts"],"sourcesContent":["// src/ai/flows/generate-task-response.ts\n'use server';\n\n/**\n * @fileOverview Generates personalized and humorous responses from the AI companion based on the user's task completion rate.\n *\n * - generateTaskResponse - A function that generates the AI response.\n * - GenerateTaskResponseInput - The input type for the generateTaskResponse function.\n * - GenerateTaskResponseOutput - The return type for the generateTaskResponse function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst GenerateTaskResponseInputSchema = z.object({\n  respectLevel: z\n    .number()\n    .describe(\n      'The respect level of the user, which determines the AI character’s tone and behavior. Higher values indicate more respect.'\n    ),\n  taskCompletionRate: z\n    .number()\n    .describe(\n      'The task completion rate of the user, represented as a decimal between 0 and 1.'\n    ),\n  lastTaskCompleted: z\n    .boolean()\n    .describe('Indicates whether the last task was completed or not.'),\n});\nexport type GenerateTaskResponseInput = z.infer<typeof GenerateTaskResponseInputSchema>;\n\nconst GenerateTaskResponseOutputSchema = z.object({\n  response: z.string().describe('The AI companion’s response.'),\n});\nexport type GenerateTaskResponseOutput = z.infer<typeof GenerateTaskResponseOutputSchema>;\n\nexport async function generateTaskResponse(input: GenerateTaskResponseInput): Promise<GenerateTaskResponseOutput> {\n  return generateTaskResponseFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateTaskResponsePrompt',\n  input: {\n    schema: z.object({\n      respectLevel: z\n        .number()\n        .describe(\n          'The respect level of the user, which determines the AI character’s tone and behavior. Higher values indicate more respect.'\n        ),\n      taskCompletionRate: z\n        .number()\n        .describe(\n          'The task completion rate of the user, represented as a decimal between 0 and 1.'\n        ),\n      lastTaskCompleted: z\n        .boolean()\n        .describe('Indicates whether the last task was completed or not.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      response: z.string().describe('The AI companion’s response.'),\n    }),\n  },\n  prompt: `\nYou are an AI companion whose behavior changes based on the user's task completion rate and respect level.\n\nUse the following information to generate a personalized and humorous response. The goal is to create an engaging and emotionally dynamic interaction.\n\nRespect Level: {{{respectLevel}}}\nTask Completion Rate: {{{taskCompletionRate}}}\nLast Task Completed: {{{lastTaskCompleted}}}\n\nInstructions:\n\n- If the respect level is high (e.g., above 7), be supportive, kind, and encouraging.\n- If the respect level is medium (e.g., between 4 and 7), be neutral with a hint of humor.\n- If the respect level is low (e.g., below 4), be sarcastic, passive-aggressive, or brutally honest, but always in a humorous way.\n- Vary the response based on whether the last task was completed or not. Praise them if they completed it; tease them if they didn't.\n\nResponse:\n`,\n});\n\nconst generateTaskResponseFlow = ai.defineFlow<\n  typeof GenerateTaskResponseInputSchema,\n  typeof GenerateTaskResponseOutputSchema\n>(\n  {\n    name: 'generateTaskResponseFlow',\n    inputSchema: GenerateTaskResponseInputSchema,\n    outputSchema: GenerateTaskResponseOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,yCAAyC;;;;;;AAGzC;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;IAEJ,oBAAoB,uIAAA,CAAA,IAAC,CAClB,MAAM,GACN,QAAQ,CACP;IAEJ,mBAAmB,uIAAA,CAAA,IAAC,CACjB,OAAO,GACP,QAAQ,CAAC;AACd;AAGA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGO,eAAe,uCAAkB,GAAlB,qBAAqB,KAAgC;IACzE,OAAO,yBAAyB;AAClC;AAEA,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;YAEJ,oBAAoB,uIAAA,CAAA,IAAC,CAClB,MAAM,GACN,QAAQ,CACP;YAEJ,mBAAmB,uIAAA,CAAA,IAAC,CACjB,OAAO,GACP,QAAQ,CAAC;QACd;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAChC;IACF;IACA,QAAQ,CAAC;;;;;;;;;;;;;;;;;AAiBX,CAAC;AACD;AAEA,MAAM,2BAA2B,2HAAA,CAAA,KAAE,CAAC,UAAU,CAI5C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA5DoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 330, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Hanish/Downloads/TM/src/ai/flows/generate-onboarding-message.ts"],"sourcesContent":[" 'use server';\n\n/**\n * @fileOverview Generates an onboarding message for the AI companion.\n *\n * - generateOnboardingMessage - A function that generates the onboarding message.\n * - GenerateOnboardingMessageInput - The input type for the generateOnboardingMessage function.\n * - GenerateOnboardingMessageOutput - The return type for the generateOnboardingMessage function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst GenerateOnboardingMessageInputSchema = z.object({\n  userName: z.string().describe('The name of the user.'),\n});\nexport type GenerateOnboardingMessageInput = z.infer<typeof GenerateOnboardingMessageInputSchema>;\n\nconst GenerateOnboardingMessageOutputSchema = z.object({\n  message: z.string().describe('The generated onboarding message.'),\n});\nexport type GenerateOnboardingMessageOutput = z.infer<typeof GenerateOnboardingMessageOutputSchema>;\n\nexport async function generateOnboardingMessage(input: GenerateOnboardingMessageInput): Promise<GenerateOnboardingMessageOutput> {\n  return generateOnboardingMessageFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateOnboardingMessagePrompt',\n  input: {\n    schema: z.object({\n      userName: z.string().describe('The name of the user.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      message: z.string().describe('The generated onboarding message.'),\n    }),\n  },\n  prompt: `You are TaskMaster AI, a helpful AI companion with a neutral respect level.\n  Introduce yourself to the new user, {{{userName}}}, and explain your purpose in a humorous and engaging way.\n  Keep the message concise.`,\n});\n\nconst generateOnboardingMessageFlow = ai.defineFlow<\n  typeof GenerateOnboardingMessageInputSchema,\n  typeof GenerateOnboardingMessageOutputSchema\n>({\n  name: 'generateOnboardingMessageFlow',\n  inputSchema: GenerateOnboardingMessageInputSchema,\n  outputSchema: GenerateOnboardingMessageOutputSchema,\n}, async input => {\n  const {output} = await prompt(input);\n  return output!;\n});\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,uCAAuC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAGO,eAAe,uCAAuB,GAAvB,0BAA0B,KAAqC;IACnF,OAAO,8BAA8B;AACvC;AAEA,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAChC;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC/B;IACF;IACA,QAAQ,CAAC;;2BAEgB,CAAC;AAC5B;AAEA,MAAM,gCAAgC,2HAAA,CAAA,KAAE,CAAC,UAAU,CAGjD;IACA,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GAAG,OAAM;IACP,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA/BsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 393, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 443, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Hanish/Downloads/TM/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 457, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Hanish/Downloads/TM/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 471, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}